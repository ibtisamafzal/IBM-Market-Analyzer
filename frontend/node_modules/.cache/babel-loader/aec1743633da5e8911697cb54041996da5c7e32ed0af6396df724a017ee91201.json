{"ast":null,"code":"var _jsxFileName = \"D:\\\\IBM-Analyzer\\\\frontend\\\\src\\\\components\\\\SentimentMeter.js\";\n// SentimentMeter.js\nimport React from \"react\";\nimport { RadialBarChart, RadialBar, PolarAngleAxis } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getColor = percentage => {\n  var _colorMap$find;\n  const colorMap = [{\n    threshold: 90,\n    color: \"#006400\"\n  }, {\n    threshold: 80,\n    color: \"#28a745\"\n  }, {\n    threshold: 70,\n    color: \"#40c057\"\n  }, {\n    threshold: 60,\n    color: \"#87d068\"\n  }, {\n    threshold: 50,\n    color: \"#2596be\"\n  }, {\n    threshold: 40,\n    color: \"#ffd700\"\n  }, {\n    threshold: 30,\n    color: \"#ff8c00\"\n  }, {\n    threshold: 20,\n    color: \"#e28743\"\n  }, {\n    threshold: 10,\n    color: \"#ff6347\"\n  }, {\n    threshold: 0,\n    color: \"#dc3545\"\n  }];\n  return ((_colorMap$find = colorMap.find(({\n    threshold\n  }) => percentage >= threshold)) === null || _colorMap$find === void 0 ? void 0 : _colorMap$find.color) || colorMap[colorMap.length - 1].color;\n};\nconst getSentimentLabel = score => {\n  if (score > 0.3) return \"Positive\";\n  if (score < -0.3) return \"Negative\";\n  return \"Neutral\";\n};\nconst SentimentMeter = ({\n  score,\n  debug = false,\n  width = 300,\n  height = 300\n}) => {\n  // Normalize score between -1 and 1\n  let normalizedScore = Math.max(-1, Math.min(1, Number(score) || 0));\n\n  // Add random variation if debug mode is enabled\n  if (debug) {\n    const randomFactor = (Math.random() - 0.5) * 0.4;\n    normalizedScore = Math.max(-1, Math.min(1, normalizedScore + randomFactor));\n  }\n\n  // Convert to percentage (0-100)\n  const percentage = ((normalizedScore + 1) * 50).toFixed(1);\n  const chartData = [{\n    value: Number(percentage),\n    fill: getColor(Number(percentage))\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sentiment-meter\",\n    children: [/*#__PURE__*/_jsxDEV(RadialBarChart, {\n      width: width,\n      height: height,\n      cx: \"50%\",\n      cy: \"50%\",\n      innerRadius: \"80%\",\n      outerRadius: \"100%\",\n      barSize: 20,\n      data: chartData,\n      startAngle: 180,\n      endAngle: 0,\n      children: [/*#__PURE__*/_jsxDEV(PolarAngleAxis, {\n        type: \"number\",\n        domain: [0, 100],\n        angleAxisId: 0,\n        tick: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RadialBar, {\n        minAngle: 15,\n        background: true,\n        clockWise: true,\n        dataKey: \"value\",\n        cornerRadius: 10\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sentiment-label\",\n      children: getSentimentLabel(normalizedScore)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_c = SentimentMeter;\nexport default SentimentMeter;\nvar _c;\n$RefreshReg$(_c, \"SentimentMeter\");","map":{"version":3,"names":["React","RadialBarChart","RadialBar","PolarAngleAxis","jsxDEV","_jsxDEV","getColor","percentage","_colorMap$find","colorMap","threshold","color","find","length","getSentimentLabel","score","SentimentMeter","debug","width","height","normalizedScore","Math","max","min","Number","randomFactor","random","toFixed","chartData","value","fill","className","children","cx","cy","innerRadius","outerRadius","barSize","data","startAngle","endAngle","type","domain","angleAxisId","tick","fileName","_jsxFileName","lineNumber","columnNumber","minAngle","background","clockWise","dataKey","cornerRadius","_c","$RefreshReg$"],"sources":["D:/IBM-Analyzer/frontend/src/components/SentimentMeter.js"],"sourcesContent":["// SentimentMeter.js\r\nimport React from \"react\";\r\nimport { RadialBarChart, RadialBar, PolarAngleAxis } from \"recharts\";\r\n\r\nconst getColor = (percentage) => {\r\n  const colorMap = [\r\n    { threshold: 90, color: \"#006400\" },\r\n    { threshold: 80, color: \"#28a745\" },\r\n    { threshold: 70, color: \"#40c057\" },\r\n    { threshold: 60, color: \"#87d068\" },\r\n    { threshold: 50, color: \"#2596be\" },\r\n    { threshold: 40, color: \"#ffd700\" },\r\n    { threshold: 30, color: \"#ff8c00\" },\r\n    { threshold: 20, color: \"#e28743\" },\r\n    { threshold: 10, color: \"#ff6347\" },\r\n    { threshold: 0, color: \"#dc3545\" }\r\n  ];\r\n\r\n  return colorMap.find(({ threshold }) => percentage >= threshold)?.color || colorMap[colorMap.length - 1].color;\r\n};\r\n\r\nconst getSentimentLabel = (score) => {\r\n  if (score > 0.3) return \"Positive\";\r\n  if (score < -0.3) return \"Negative\";\r\n  return \"Neutral\";\r\n};\r\n\r\nconst SentimentMeter = ({ score, debug = false, width = 300, height = 300 }) => {\r\n  // Normalize score between -1 and 1\r\n  let normalizedScore = Math.max(-1, Math.min(1, Number(score) || 0));\r\n\r\n  // Add random variation if debug mode is enabled\r\n  if (debug) {\r\n    const randomFactor = (Math.random() - 0.5) * 0.4;\r\n    normalizedScore = Math.max(-1, Math.min(1, normalizedScore + randomFactor));\r\n  }\r\n\r\n  // Convert to percentage (0-100)\r\n  const percentage = ((normalizedScore + 1) * 50).toFixed(1);\r\n  \r\n  const chartData = [{\r\n    value: Number(percentage),\r\n    fill: getColor(Number(percentage))\r\n  }];\r\n\r\n  return (\r\n    <div className=\"sentiment-meter\">\r\n      <RadialBarChart\r\n        width={width}\r\n        height={height}\r\n        cx=\"50%\"\r\n        cy=\"50%\"\r\n        innerRadius=\"80%\"\r\n        outerRadius=\"100%\"\r\n        barSize={20}\r\n        data={chartData}\r\n        startAngle={180}\r\n        endAngle={0}\r\n      >\r\n        <PolarAngleAxis\r\n          type=\"number\"\r\n          domain={[0, 100]}\r\n          angleAxisId={0}\r\n          tick={false}\r\n        />\r\n        <RadialBar\r\n          minAngle={15}\r\n          background\r\n          clockWise\r\n          dataKey=\"value\"\r\n          cornerRadius={10}\r\n        />\r\n      </RadialBarChart>\r\n      <div className=\"sentiment-label\">\r\n        {getSentimentLabel(normalizedScore)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SentimentMeter;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}