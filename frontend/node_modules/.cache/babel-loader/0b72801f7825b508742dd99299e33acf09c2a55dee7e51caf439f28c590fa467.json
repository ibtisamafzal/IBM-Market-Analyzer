{"ast":null,"code":"import axios from \"axios\";\nconst API_BASE_URL = \"http://127.0.0.1:5000/news\"; // Flask backend URL\n\nexport const fetchNewsWithSentiment = async query => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/fetch-news?query=${query}`);\n    if (response.status !== 200) {\n      throw new Error(\"Failed to fetch news\");\n    }\n    return response.data; // Includes articles, sentiment_score, and recommendations\n  } catch (error) {\n    console.error(\"Error fetching news:\", error);\n    return {\n      articles: [],\n      sentiment_score: null,\n      recommendations: []\n    };\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","fetchNewsWithSentiment","query","response","get","status","Error","data","error","console","articles","sentiment_score","recommendations"],"sources":["D:/IBM-Analyzer/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_BASE_URL = \"http://127.0.0.1:5000/news\"; // Flask backend URL\r\n\r\nexport const fetchNewsWithSentiment = async (query) => {\r\n    try {\r\n        const response = await axios.get(`${API_BASE_URL}/fetch-news?query=${query}`);\r\n        \r\n        if (response.status !== 200) {\r\n            throw new Error(\"Failed to fetch news\");\r\n        }\r\n\r\n        return response.data; // Includes articles, sentiment_score, and recommendations\r\n    } catch (error) {\r\n        console.error(\"Error fetching news:\", error);\r\n        return { articles: [], sentiment_score: null, recommendations: [] };\r\n    }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,4BAA4B,CAAC,CAAC;;AAEnD,OAAO,MAAMC,sBAAsB,GAAG,MAAOC,KAAK,IAAK;EACnD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,GAAGJ,YAAY,qBAAqBE,KAAK,EAAE,CAAC;IAE7E,IAAIC,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;MACzB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IAC3C;IAEA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO;MAAEE,QAAQ,EAAE,EAAE;MAAEC,eAAe,EAAE,IAAI;MAAEC,eAAe,EAAE;IAAG,CAAC;EACvE;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}