{"ast":null,"code":"var _jsxFileName = \"D:\\\\IBM-Analyzer\\\\frontend\\\\src\\\\components\\\\SentimentMeter.js\";\nimport React from \"react\";\nimport { ProgressBar } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SentimentMeter = ({\n  score\n}) => {\n  // Ensure score is a number and within bounds\n  const normalizedScore = Math.max(-1, Math.min(1, Number(score) || 0));\n\n  // Determine the variant (color) based on the score\n  const getVariant = value => {\n    if (value > 0.3) return \"success\"; // Positive\n    if (value < -0.3) return \"danger\"; // Negative\n    return \"warning\"; // Neutral\n  };\n\n  // Calculate the percentage for the progress bar\n  const getPercentage = value => {\n    return ((value + 1) * 50).toFixed(1);\n  };\n\n  // Get the label for the progress bar\n  const getLabel = value => {\n    return `${getPercentage(value)}%`;\n  };\n\n  // Get the trend label (Positive, Negative, Neutral)\n  const getTrendLabel = value => {\n    if (value > 0.3) return \"Positive Trend\";\n    if (value < -0.3) return \"Negative Trend\";\n    return \"Neutral Trend\";\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sentiment-meter\",\n    children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n      now: getPercentage(normalizedScore),\n      variant: getVariant(normalizedScore),\n      animated: true,\n      striped: true,\n      label: getLabel(normalizedScore),\n      style: {\n        height: '25px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center mt-2\",\n      children: getTrendLabel(normalizedScore)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n_c = SentimentMeter;\nexport default SentimentMeter;\nvar _c;\n$RefreshReg$(_c, \"SentimentMeter\");","map":{"version":3,"names":["React","ProgressBar","jsxDEV","_jsxDEV","SentimentMeter","score","normalizedScore","Math","max","min","Number","getVariant","value","getPercentage","toFixed","getLabel","getTrendLabel","className","children","now","variant","animated","striped","label","style","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/IBM-Analyzer/frontend/src/components/SentimentMeter.js"],"sourcesContent":["import React from \"react\";\r\nimport { ProgressBar } from \"react-bootstrap\";\r\n\r\nconst SentimentMeter = ({ score }) => {\r\n    // Ensure score is a number and within bounds\r\n    const normalizedScore = Math.max(-1, Math.min(1, Number(score) || 0));\r\n    \r\n    // Determine the variant (color) based on the score\r\n    const getVariant = (value) => {\r\n        if (value > 0.3) return \"success\";  // Positive\r\n        if (value < -0.3) return \"danger\";  // Negative\r\n        return \"warning\";  // Neutral\r\n    };\r\n\r\n    // Calculate the percentage for the progress bar\r\n    const getPercentage = (value) => {\r\n        return ((value + 1) * 50).toFixed(1);\r\n    };\r\n\r\n    // Get the label for the progress bar\r\n    const getLabel = (value) => {\r\n        return `${getPercentage(value)}%`;\r\n    };\r\n\r\n    // Get the trend label (Positive, Negative, Neutral)\r\n    const getTrendLabel = (value) => {\r\n        if (value > 0.3) return \"Positive Trend\";\r\n        if (value < -0.3) return \"Negative Trend\";\r\n        return \"Neutral Trend\";\r\n    };\r\n\r\n    return (\r\n        <div className=\"sentiment-meter\">\r\n            <ProgressBar \r\n                now={getPercentage(normalizedScore)}\r\n                variant={getVariant(normalizedScore)}\r\n                animated\r\n                striped\r\n                label={getLabel(normalizedScore)}\r\n                style={{ height: '25px' }}\r\n            />\r\n            <div className=\"text-center mt-2\">\r\n                {getTrendLabel(normalizedScore)}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SentimentMeter;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAClC;EACA,MAAMC,eAAe,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEC,MAAM,CAACL,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;;EAErE;EACA,MAAMM,UAAU,GAAIC,KAAK,IAAK;IAC1B,IAAIA,KAAK,GAAG,GAAG,EAAE,OAAO,SAAS,CAAC,CAAE;IACpC,IAAIA,KAAK,GAAG,CAAC,GAAG,EAAE,OAAO,QAAQ,CAAC,CAAE;IACpC,OAAO,SAAS,CAAC,CAAE;EACvB,CAAC;;EAED;EACA,MAAMC,aAAa,GAAID,KAAK,IAAK;IAC7B,OAAO,CAAC,CAACA,KAAK,GAAG,CAAC,IAAI,EAAE,EAAEE,OAAO,CAAC,CAAC,CAAC;EACxC,CAAC;;EAED;EACA,MAAMC,QAAQ,GAAIH,KAAK,IAAK;IACxB,OAAO,GAAGC,aAAa,CAACD,KAAK,CAAC,GAAG;EACrC,CAAC;;EAED;EACA,MAAMI,aAAa,GAAIJ,KAAK,IAAK;IAC7B,IAAIA,KAAK,GAAG,GAAG,EAAE,OAAO,gBAAgB;IACxC,IAAIA,KAAK,GAAG,CAAC,GAAG,EAAE,OAAO,gBAAgB;IACzC,OAAO,eAAe;EAC1B,CAAC;EAED,oBACIT,OAAA;IAAKc,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC5Bf,OAAA,CAACF,WAAW;MACRkB,GAAG,EAAEN,aAAa,CAACP,eAAe,CAAE;MACpCc,OAAO,EAAET,UAAU,CAACL,eAAe,CAAE;MACrCe,QAAQ;MACRC,OAAO;MACPC,KAAK,EAAER,QAAQ,CAACT,eAAe,CAAE;MACjCkB,KAAK,EAAE;QAAEC,MAAM,EAAE;MAAO;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC,eACF1B,OAAA;MAAKc,SAAS,EAAC,kBAAkB;MAAAC,QAAA,EAC5BF,aAAa,CAACV,eAAe;IAAC;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACC,EAAA,GA3CI1B,cAAc;AA6CpB,eAAeA,cAAc;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}