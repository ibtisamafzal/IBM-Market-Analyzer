{"ast":null,"code":"var _jsxFileName = \"D:\\\\IBM-Analyzer\\\\frontend\\\\src\\\\components\\\\SentimentMeter.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { RadialBarChart, RadialBar, PolarAngleAxis } from \"recharts\";\nimport \"../custom.css\"; // Ensure your custom CSS is imported\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SentimentMeter = ({\n  score\n}) => {\n  let normalizedScore = Math.max(-1, Math.min(1, Number(score) || 0));\n  const percentage = ((normalizedScore + 1) * 50).toFixed(1);\n  const getColor = value => {\n    if (value >= 90) return \"#006400\";\n    if (value >= 80) return \"#28a745\";\n    if (value >= 70) return \"#40c057\";\n    if (value >= 60) return \"#87d068\";\n    if (value >= 50) return \"#2596be\";\n    if (value >= 40) return \"#ffd700\";\n    if (value >= 30) return \"#ff8c00\";\n    if (value >= 20) return \"#e28743\";\n    if (value >= 10) return \"#ff6347\";\n    return \"#dc3545\";\n  };\n  const data = [{\n    value: Number(percentage),\n    fill: getColor(Number(percentage))\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sentiment-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"sentiment-title\",\n      children: \"Overall Sentiment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(RadialBarChart, {\n      width: 300,\n      height: 300,\n      cx: \"50%\",\n      cy: \"50%\",\n      innerRadius: \"80%\",\n      outerRadius: \"100%\",\n      barSize: 20,\n      data: data,\n      children: [/*#__PURE__*/_jsxDEV(PolarAngleAxis, {\n        type: \"number\",\n        domain: [0, 100],\n        angleAxisId: 0,\n        tick: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(RadialBar, {\n        minAngle: 15,\n        background: true,\n        clockWise: true,\n        dataKey: \"value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"sentiment-text\",\n      children: normalizedScore > 0.3 ? \"Positive\" : normalizedScore < -0.3 ? \"Negative\" : \"Neutral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n_c = SentimentMeter;\nSentimentMeter.propTypes = {\n  score: PropTypes.number.isRequired\n};\nexport default SentimentMeter;\nvar _c;\n$RefreshReg$(_c, \"SentimentMeter\");","map":{"version":3,"names":["React","PropTypes","RadialBarChart","RadialBar","PolarAngleAxis","jsxDEV","_jsxDEV","SentimentMeter","score","normalizedScore","Math","max","min","Number","percentage","toFixed","getColor","value","data","fill","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","cx","cy","innerRadius","outerRadius","barSize","type","domain","angleAxisId","tick","minAngle","background","clockWise","dataKey","_c","propTypes","number","isRequired","$RefreshReg$"],"sources":["D:/IBM-Analyzer/frontend/src/components/SentimentMeter.js"],"sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { RadialBarChart, RadialBar, PolarAngleAxis } from \"recharts\";\r\nimport \"../custom.css\"; // Ensure your custom CSS is imported\r\n\r\nconst SentimentMeter = ({ score }) => {\r\n    let normalizedScore = Math.max(-1, Math.min(1, Number(score) || 0));\r\n    const percentage = ((normalizedScore + 1) * 50).toFixed(1);\r\n\r\n    const getColor = (value) => {\r\n        if (value >= 90) return \"#006400\";\r\n        if (value >= 80) return \"#28a745\";\r\n        if (value >= 70) return \"#40c057\";\r\n        if (value >= 60) return \"#87d068\";\r\n        if (value >= 50) return \"#2596be\";\r\n        if (value >= 40) return \"#ffd700\";\r\n        if (value >= 30) return \"#ff8c00\";\r\n        if (value >= 20) return \"#e28743\";\r\n        if (value >= 10) return \"#ff6347\";\r\n        return \"#dc3545\";\r\n    };\r\n\r\n    const data = [{ value: Number(percentage), fill: getColor(Number(percentage)) }];\r\n\r\n    return (\r\n        <div className=\"sentiment-container\">\r\n            <h3 className=\"sentiment-title\">Overall Sentiment</h3>\r\n            <RadialBarChart\r\n                width={300}\r\n                height={300}\r\n                cx=\"50%\"\r\n                cy=\"50%\"\r\n                innerRadius=\"80%\"\r\n                outerRadius=\"100%\"\r\n                barSize={20}\r\n                data={data}\r\n            >\r\n                <PolarAngleAxis type=\"number\" domain={[0, 100]} angleAxisId={0} tick={false} />\r\n                <RadialBar minAngle={15} background clockWise dataKey=\"value\" />\r\n            </RadialBarChart>\r\n            <p className=\"sentiment-text\">\r\n                {normalizedScore > 0.3 ? \"Positive\" : normalizedScore < -0.3 ? \"Negative\" : \"Neutral\"}\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nSentimentMeter.propTypes = {\r\n    score: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default SentimentMeter;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}