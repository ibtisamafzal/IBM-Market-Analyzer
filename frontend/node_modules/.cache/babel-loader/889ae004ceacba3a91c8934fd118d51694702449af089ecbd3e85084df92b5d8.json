{"ast":null,"code":"var _jsxFileName = \"D:\\\\IBM-Analyzer\\\\frontend\\\\src\\\\components\\\\SentimentMeter.js\";\nimport React from \"react\";\nimport { RadialBarChart, RadialBar, PolarAngleAxis } from \"recharts\";\nimport \"../custom.css\"; // Ensure your custom CSS is imported\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SentimentMeter = ({\n  score,\n  debug = false\n}) => {\n  let normalizedScore = Math.max(-1, Math.min(1, Number(score) || 0));\n  if (debug) {\n    const randomFactor = (Math.random() - 0.5) * 0.4;\n    normalizedScore = Math.max(-1, Math.min(1, normalizedScore + randomFactor));\n  }\n  const percentage = ((normalizedScore + 1) * 50).toFixed(1);\n  const getColor = value => {\n    if (value >= 90) return \"#006400\";\n    if (value >= 80) return \"#28a745\";\n    if (value >= 70) return \"#40c057\";\n    if (value >= 60) return \"#87d068\";\n    if (value >= 50) return \"#2596be\";\n    if (value >= 40) return \"#ffd700\";\n    if (value >= 30) return \"#ff8c00\";\n    if (value >= 20) return \"#e28743\";\n    if (value >= 10) return \"#ff6347\";\n    return \"#dc3545\";\n  };\n  const data = [{\n    value: Number(percentage),\n    fill: getColor(Number(percentage))\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sentiment-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"sentiment-title\",\n      children: \"Overall Sentiment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(RadialBarChart, {\n      width: 300,\n      height: 300,\n      cx: \"50%\",\n      cy: \"50%\",\n      innerRadius: \"80%\",\n      outerRadius: \"100%\",\n      barSize: 20,\n      data: data,\n      children: [/*#__PURE__*/_jsxDEV(PolarAngleAxis, {\n        type: \"number\",\n        domain: [0, 100],\n        angleAxisId: 0,\n        tick: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(RadialBar, {\n        minAngle: 15,\n        background: true,\n        clockWise: true,\n        dataKey: \"value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"sentiment-text\",\n      children: normalizedScore > 0.3 ? \"Positive\" : normalizedScore < -0.3 ? \"Negative\" : \"Neutral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n_c = SentimentMeter;\nexport default SentimentMeter;\nvar _c;\n$RefreshReg$(_c, \"SentimentMeter\");","map":{"version":3,"names":["React","RadialBarChart","RadialBar","PolarAngleAxis","jsxDEV","_jsxDEV","SentimentMeter","score","debug","normalizedScore","Math","max","min","Number","randomFactor","random","percentage","toFixed","getColor","value","data","fill","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","cx","cy","innerRadius","outerRadius","barSize","type","domain","angleAxisId","tick","minAngle","background","clockWise","dataKey","_c","$RefreshReg$"],"sources":["D:/IBM-Analyzer/frontend/src/components/SentimentMeter.js"],"sourcesContent":["import React from \"react\";\r\nimport { RadialBarChart, RadialBar, PolarAngleAxis } from \"recharts\";\r\nimport \"../custom.css\"; // Ensure your custom CSS is imported\r\n\r\nconst SentimentMeter = ({ score, debug = false }) => {\r\n    let normalizedScore = Math.max(-1, Math.min(1, Number(score) || 0));\r\n\r\n    if (debug) {\r\n        const randomFactor = (Math.random() - 0.5) * 0.4;\r\n        normalizedScore = Math.max(-1, Math.min(1, normalizedScore + randomFactor));\r\n    }\r\n\r\n    const percentage = ((normalizedScore + 1) * 50).toFixed(1);\r\n\r\n    const getColor = (value) => {\r\n        if (value >= 90) return \"#006400\";\r\n        if (value >= 80) return \"#28a745\";\r\n        if (value >= 70) return \"#40c057\";\r\n        if (value >= 60) return \"#87d068\";\r\n        if (value >= 50) return \"#2596be\";\r\n        if (value >= 40) return \"#ffd700\";\r\n        if (value >= 30) return \"#ff8c00\";\r\n        if (value >= 20) return \"#e28743\";\r\n        if (value >= 10) return \"#ff6347\";\r\n        return \"#dc3545\";\r\n    };\r\n\r\n    const data = [{ value: Number(percentage), fill: getColor(Number(percentage)) }];\r\n\r\n    return (\r\n        <div className=\"sentiment-container\">\r\n            <h3 className=\"sentiment-title\">Overall Sentiment</h3>\r\n            <RadialBarChart\r\n                width={300}\r\n                height={300}\r\n                cx=\"50%\"\r\n                cy=\"50%\"\r\n                innerRadius=\"80%\"\r\n                outerRadius=\"100%\"\r\n                barSize={20}\r\n                data={data}\r\n            >\r\n                <PolarAngleAxis type=\"number\" domain={[0, 100]} angleAxisId={0} tick={false} />\r\n                <RadialBar minAngle={15} background clockWise dataKey=\"value\" />\r\n            </RadialBarChart>\r\n            <p className=\"sentiment-text\">\r\n                {normalizedScore > 0.3 ? \"Positive\" : normalizedScore < -0.3 ? \"Negative\" : \"Neutral\"}\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SentimentMeter;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,EAAEC,SAAS,EAAEC,cAAc,QAAQ,UAAU;AACpE,OAAO,eAAe,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,cAAc,GAAGA,CAAC;EAAEC,KAAK;EAAEC,KAAK,GAAG;AAAM,CAAC,KAAK;EACjD,IAAIC,eAAe,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEC,MAAM,CAACN,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;EAEnE,IAAIC,KAAK,EAAE;IACP,MAAMM,YAAY,GAAG,CAACJ,IAAI,CAACK,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG;IAChDN,eAAe,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEH,eAAe,GAAGK,YAAY,CAAC,CAAC;EAC/E;EAEA,MAAME,UAAU,GAAG,CAAC,CAACP,eAAe,GAAG,CAAC,IAAI,EAAE,EAAEQ,OAAO,CAAC,CAAC,CAAC;EAE1D,MAAMC,QAAQ,GAAIC,KAAK,IAAK;IACxB,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,SAAS;IACjC,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,SAAS;IACjC,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,SAAS;IACjC,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,SAAS;IACjC,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,SAAS;IACjC,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,SAAS;IACjC,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,SAAS;IACjC,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,SAAS;IACjC,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,SAAS;IACjC,OAAO,SAAS;EACpB,CAAC;EAED,MAAMC,IAAI,GAAG,CAAC;IAAED,KAAK,EAAEN,MAAM,CAACG,UAAU,CAAC;IAAEK,IAAI,EAAEH,QAAQ,CAACL,MAAM,CAACG,UAAU,CAAC;EAAE,CAAC,CAAC;EAEhF,oBACIX,OAAA;IAAKiB,SAAS,EAAC,qBAAqB;IAAAC,QAAA,gBAChClB,OAAA;MAAIiB,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAAC;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtDtB,OAAA,CAACJ,cAAc;MACX2B,KAAK,EAAE,GAAI;MACXC,MAAM,EAAE,GAAI;MACZC,EAAE,EAAC,KAAK;MACRC,EAAE,EAAC,KAAK;MACRC,WAAW,EAAC,KAAK;MACjBC,WAAW,EAAC,MAAM;MAClBC,OAAO,EAAE,EAAG;MACZd,IAAI,EAAEA,IAAK;MAAAG,QAAA,gBAEXlB,OAAA,CAACF,cAAc;QAACgC,IAAI,EAAC,QAAQ;QAACC,MAAM,EAAE,CAAC,CAAC,EAAE,GAAG,CAAE;QAACC,WAAW,EAAE,CAAE;QAACC,IAAI,EAAE;MAAM;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC/EtB,OAAA,CAACH,SAAS;QAACqC,QAAQ,EAAE,EAAG;QAACC,UAAU;QAACC,SAAS;QAACC,OAAO,EAAC;MAAO;QAAAlB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpD,CAAC,eACjBtB,OAAA;MAAGiB,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EACxBd,eAAe,GAAG,GAAG,GAAG,UAAU,GAAGA,eAAe,GAAG,CAAC,GAAG,GAAG,UAAU,GAAG;IAAS;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEd,CAAC;AAACgB,EAAA,GA9CIrC,cAAc;AAgDpB,eAAeA,cAAc;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}